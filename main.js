// Autogenerated by ElectronInit
const { app, BrowserWindow, Menu, Tray, screen } = require('electron');
const {prodPath} = require("./src/Tools.js");

// Keep a global reference of the window object, if you don't, the window will
// be closed automatically when the JavaScript object is garbage collected.
/**
 * @type {BrowserWindow}
 */
let win;
let winIconSrc = prodPath("./favicon.ico");
// This app is a tray app.
/**
 * @type {Tray}
 */
var appTray = null;
function createWindow () {
  // Create the browser window.
  win = new BrowserWindow({
    width: 500,
    height: 400,
    // resizable: false,
    webPreferences: {
      nodeIntegration: true,
      enableRemoteModule: true
    },
    autoHideMenuBar: true,
    alwaysOnTop: true,
    darkTheme: true,
    fullscreenable: false,
    frame: false,
    transparent: true,
    icon: winIconSrc
  });

  // and load the renderer.html of the app.
  win.loadFile('src/dashboard.html');

  // Open the DevTools.
  //win.webContents.openDevTools();

  // Emitted when the window is closed.
  win.on('closed', () => {
    // Dereference the window object, usually you would store windows
    // in an array if your app supports multi windows, this is the time
    // when you should delete the corresponding element.
    win = null;
  });

  // Create tray
  appTray = new Tray(winIconSrc);
  appTray.on("click", () => {
    let cursor = screen.getCursorScreenPoint();
    let winBounds = win.getBounds();
    win.setPosition(cursor.x - 8 - winBounds.width, cursor.y - 8 - winBounds.height, true);
    win.show();
  });
  appTray.setContextMenu(Menu.buildFromTemplate([
    {
      label: "Quit",
      click() {
        app.quit();
      }
    }
  ]));
}


// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed.
app.on('window-all-closed', () => {
  // On macOS it is common for applications and their menu bar
  // to stay active until the user quits explicitly with Cmd + Q
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On macOS it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (win === null) {
    createWindow();
  }
});
